    ?start : program

    ?program : classes methods stmt_block

    ?classes : clazz*

    clazz : "class" NAME "(" formals ")" ["extends" NAME] "{" stmt_block  methods "}"

    ?methods : method*

    method : "def" NAME "(" formals ")" [":" NAME] "{" stmt_block "}"

    ?stmt_block : statement*

    ?formals: formal*

    formal: NAME ":" NAME
        | "," NAME ":" NAME

    ?statement: r_exp ";"
        | assignment ";"
        | returns ";"
        | if_stmt
        | while_stmt

    returns : "return" [r_exp]

    assignment : l_exp [":" NAME] "=" r_exp

    if_stmt : "if" condition "{" stmt_block "}" otherwise*

    otherwise : "elif" condition "{" stmt_block "}" [otherwise*] -> if_stmt
        |"else" "{" stmt_block "}"  -> else_stmt

    while_stmt : "while" condition "{" stmt_block "}"

    ?condition : condition "and" logic_exp -> bool_and
        | condition "or" logic_exp -> bool_or
        | "not" logic_exp -> nots
        | logic_exp

    logic_exp : r_exp "<" r_exp -> less_than
        | r_exp ">" r_exp -> greater_than
        | r_exp "<=" r_exp -> less_equal
        | r_exp ">=" r_exp -> greater_equal
        | r_exp "==" r_exp -> equals

    ?l_exp : NAME  -> store
        | calls "." NAME   -> store_field

    ?r_exp : calc

    args : r_exp
        | "," r_exp

    ?calc : product
        | calc "+" product   -> plus
        | calc "-" product   -> sub

    ?product : calls
        | product "*" calls  -> mult
        | product "/" calls  -> div

    ?calls : atom
        | NAME "(" args* ")"   -> new
        | calls "." NAME "(" args* ")" -> method_call
        | calls "." NAME   -> load_field

    ?atom : NUMBER           -> const
        | "-" atom         -> neg
        | "(" calc ")"
        | "none"   -> lit_not
        | bool
        | ESCAPED_STRING -> lit_str
        | NAME     -> load

    ?bool : "true" -> lit_true
        |   "false" -> lit_false


    %import common.C_COMMENT
    %import common.CPP_COMMENT
    %ignore C_COMMENT
    %ignore CPP_COMMENT
    %import common.CNAME -> NAME
    %import common.ESCAPED_STRING
    %import common.NUMBER
    %import common.WS
    %ignore WS

